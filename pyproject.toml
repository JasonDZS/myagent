[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "myagent"
version = "0.1.1"
description = "Lightweight toolkit for building tool-aware LLM agents with comprehensive tracing capabilities"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "MyAgent Team"},
]
maintainers = [
    {name = "MyAgent Team"},
]
keywords = ["llm", "agent", "ai", "tools", "react", "tracing", "websocket"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.5",
    "python-dotenv>=1.0",
    "openai>=1.0",
    "tiktoken>=0.7",
    "tenacity>=8.2",
    "loguru>=0.7",
    "rich>=14.1.0",
    "websockets>=15.0.1",
    "cryptography>=46.0.1",
    "beautifulsoup4>=4.14.2",
    "lxml>=6.0.2",
    "fastapi>=0.118.0",
    "aiohttp>=3.12.15",
    "pandas>=2.3.3",
    "click>=8.0",
    "uvicorn>=0.30.0",
]

[project.optional-dependencies]
websocket = ["websockets>=12.0"]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0"
]

[project.scripts]
myagent-server = "myagent.cli.server:main"
myagent-manager = "myagent.manager.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/myagent"
Documentation = "https://github.com/yourusername/myagent#readme"
Repository = "https://github.com/yourusername/myagent"
Issues = "https://github.com/yourusername/myagent/issues"

[tool.hatch.build.targets.wheel]
packages = ["myagent"]

[tool.hatch.build.targets.sdist]
include = ["myagent"]

[tool.uv]
package = true

# Black formatting configuration
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.venv
    | \.mypy_cache
    | \.pytest_cache
    | build
    | dist
)/
'''

# Ruff linting configuration
[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info"
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused-function-argument
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "Q",      # flake8-quotes
    "FLY",    # flynt
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "SIM108", # use ternary operator
    "ARG001", # unused function argument
    "TCH003", # move stdlib import into TYPE_CHECKING
    "B019",   # functools.lru_cache on methods can lead to memory leaks
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # allow unused imports in __init__.py
"examples/*" = ["T201"]           # allow print statements in examples
"tests/*" = ["ARG001", "S101"]    # allow unused args and assert in tests

[tool.ruff.lint.isort]
known-first-party = ["myagent"]
force-single-line = true

# MyPy type checking configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "tiktoken.*",
    "tenacity.*",
    "loguru.*",
    "rich.*",
    "websockets.*",
    "aiofiles.*",
    "aiohttp.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=myagent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

# Coverage configuration
[tool.coverage.run]
source = ["myagent"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]
