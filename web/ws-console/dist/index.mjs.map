{"version":3,"sources":["../src/provider.tsx","../src/ws-client.ts","../src/components/MyAgentConsole.tsx","../src/components/MessageList.tsx","../src/components/MessageItem.tsx","../src/components/UserInput.tsx","../src/components/ConnectionStatus.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport type { AgentConsoleState, MyAgentProviderProps, WebSocketMessage } from './types';\nimport { AgentWSClient } from './ws-client';\n\ninterface Ctx {\n  state: AgentConsoleState;\n  client: AgentWSClient | null;\n  // Commands\n  createSession: (content?: any) => void;\n  sendUserMessage: (content: any) => void;\n  sendResponse: (stepId: string, content: any) => void;\n  cancel: () => void;\n  solveTasks: (tasks: any[], extras?: { question?: string; plan_summary?: string }) => void;\n  cancelTask: (taskId: string | number) => void;\n  restartTask: (taskId: string | number) => void;\n  cancelPlan: () => void;\n  replan: (question?: string) => void;\n  requestState: () => void;\n  reconnectWithState: (signedState: any, last?: { last_event_id?: string; last_seq?: number }) => void;\n}\n\nconst MyAgentCtx = createContext<Ctx | null>(null);\n\nexport function MyAgentProvider(props: MyAgentProviderProps) {\n  const { wsUrl, token, autoReconnect = true, showSystemLogs = false, onEvent, children } = props;\n  const [state, setState] = useState<AgentConsoleState>({\n    connection: 'disconnected',\n    messages: [],\n    lastEventId: null,\n    lastSeq: 0,\n    pendingConfirm: null,\n    generating: false,\n    planRunning: false,\n    aggregateRunning: false,\n    solverRunning: 0,\n    thinking: false,\n  });\n  const clientRef = useRef<AgentWSClient | null>(null);\n\n  // Lazily construct client to avoid SSR issues\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    const client = new AgentWSClient({ url: wsUrl, token, autoReconnect, onOpen: () => setState((s) => ({ ...s, connection: 'connected', error: null })), onClose: () => setState((s) => ({ ...s, connection: 'disconnected' })), onError: (err) => setState((s) => ({ ...s, connection: 'error', error: String(err) })) });\n    clientRef.current = client;\n    setState((s) => ({ ...s, connection: 'connecting' }));\n    client.connect();\n    const off = client.onMessage((m) => {\n      onEvent?.(m);\n      try {\n        if (m.event === 'agent.state_exported') {\n          const sid = m.session_id || 'unknown';\n          const signed = (m.metadata as any)?.signed_state;\n          if (signed && typeof localStorage !== 'undefined') {\n            localStorage.setItem(`ma_state_${sid}`, JSON.stringify(signed));\n            localStorage.setItem(`ma_state_latest`, JSON.stringify(signed));\n          }\n        }\n      } catch {}\n      setState((s) => {\n        const lastEventId = typeof m.event_id === 'string' ? m.event_id : s.lastEventId ?? null;\n        const lastSeq = typeof (m as any).seq === 'number' ? ((m as any).seq as number) : s.lastSeq ?? 0;\n        const nextMessages = (() => {\n          if (!showSystemLogs && String(m.event).startsWith('system.')) return s.messages;\n          return [...s.messages, m];\n        })();\n        // runtime counters\n        let planRunning = !!s.planRunning;\n        let aggregateRunning = !!s.aggregateRunning;\n        let solverRunning = Math.max(0, s.solverRunning || 0);\n        let thinking = !!s.thinking;\n        const ev = String(m.event || '');\n        switch (ev) {\n          case 'plan.start':\n            planRunning = true; thinking = false; break;\n          case 'plan.completed':\n          case 'plan.cancelled':\n            planRunning = false; thinking = false; break;\n          case 'solver.start':\n            solverRunning = solverRunning + 1; thinking = false; break;\n          case 'solver.completed':\n          case 'solver.cancelled':\n            solverRunning = Math.max(0, solverRunning - 1); break;\n          case 'aggregate.start':\n            aggregateRunning = true; thinking = false; break;\n          case 'aggregate.completed':\n            aggregateRunning = false; break;\n          case 'agent.user_confirm':\n            thinking = false; break;\n          case 'agent.final_answer':\n          case 'pipeline.completed':\n          case 'agent.interrupted':\n          case 'agent.error':\n          case 'system.error':\n            planRunning = false; aggregateRunning = false; solverRunning = 0; thinking = false; break;\n          case 'agent.thinking':\n            thinking = true; break;\n        }\n        const generating = !!(planRunning || aggregateRunning || (solverRunning > 0) || thinking);\n        if (m.event === 'agent.session_created') {\n          return { ...s, currentSessionId: m.session_id, messages: nextMessages, lastEventId, lastSeq, planRunning, aggregateRunning, solverRunning, thinking, generating };\n        }\n        return { ...s, messages: nextMessages, lastEventId, lastSeq, planRunning, aggregateRunning, solverRunning, thinking, generating };\n      });\n    });\n    return () => {\n      off();\n      client.disconnect();\n      clientRef.current = null;\n    };\n  }, [wsUrl, token, autoReconnect, showSystemLogs, onEvent]);\n\n  const send = useCallback((payload: any) => {\n    clientRef.current?.send(payload);\n  }, []);\n\n  const api = useMemo<Ctx>(() => ({\n    state,\n    client: clientRef.current,\n    createSession: (content?: any) => send({ event: 'user.create_session', content }),\n    sendUserMessage: (content: any) => {\n      if (!state.currentSessionId) return;\n      send({ event: 'user.message', session_id: state.currentSessionId, content });\n    },\n    sendResponse: (stepId: string, content: any) => {\n      if (!state.currentSessionId) return;\n      send({ event: 'user.response', session_id: state.currentSessionId, step_id: stepId, content });\n    },\n    cancel: () => state.currentSessionId && send({ event: 'user.cancel', session_id: state.currentSessionId }),\n    solveTasks: (tasks: any[], extras?: { question?: string; plan_summary?: string }) => {\n      if (!state.currentSessionId) return;\n      const content: any = { tasks };\n      if (extras?.question) content.question = extras.question;\n      if (extras?.plan_summary) content.plan_summary = extras.plan_summary;\n      send({ event: 'user.solve_tasks', session_id: state.currentSessionId, content });\n    },\n    cancelTask: (taskId: string | number) => state.currentSessionId && send({ event: 'user.cancel_task', session_id: state.currentSessionId, content: { task_id: taskId } }),\n    restartTask: (taskId: string | number) => state.currentSessionId && send({ event: 'user.restart_task', session_id: state.currentSessionId, content: { task_id: taskId } }),\n    cancelPlan: () => state.currentSessionId && send({ event: 'user.cancel_plan', session_id: state.currentSessionId }),\n    replan: (question?: string) => state.currentSessionId && send({ event: 'user.replan', session_id: state.currentSessionId, content: question ? { question } : undefined }),\n    requestState: () => state.currentSessionId && send({ event: 'user.request_state', session_id: state.currentSessionId }),\n    reconnectWithState: (signedState: any, last?: { last_event_id?: string; last_seq?: number }) =>\n      send({ event: 'user.reconnect_with_state', signed_state: signedState, ...(last || {}) }),\n  }), [send, state]);\n\n  return <MyAgentCtx.Provider value={api}>{children}</MyAgentCtx.Provider>;\n}\n\nexport function useMyAgent() {\n  const ctx = useContext(MyAgentCtx);\n  if (!ctx) throw new Error('useMyAgent must be used within MyAgentProvider');\n  return ctx;\n}\n","import { WebSocketMessage } from './types';\n\ntype Listener = (m: WebSocketMessage) => void;\n\nexport interface AgentWSClientOptions {\n  url: string;\n  token?: string;\n  autoReconnect?: boolean;\n  ackIntervalMs?: number; // 200ms default\n  onOpen?: () => void;\n  onClose?: (ev?: any) => void;\n  onError?: (err: any) => void;\n}\n\nexport class AgentWSClient {\n  private ws: WebSocket | null = null;\n  private opts: AgentWSClientOptions;\n  private listeners: Set<Listener> = new Set();\n  private reconnectTimer: any = null;\n  private lastEventId: string | null = null;\n  private lastSeq: number = 0;\n  private ackTimer: any = null;\n  private connected: boolean = false;\n\n  constructor(opts: AgentWSClientOptions) {\n    this.opts = { autoReconnect: true, ackIntervalMs: 200, ...opts };\n  }\n\n  isOpen(): boolean {\n    return this.connected && !!this.ws && this.ws.readyState === WebSocket.OPEN;\n  }\n\n  getLastEvent(): { lastEventId: string | null; lastSeq: number } {\n    return { lastEventId: this.lastEventId, lastSeq: this.lastSeq };\n  }\n\n  onMessage(fn: Listener): () => void {\n    this.listeners.add(fn);\n    return () => this.listeners.delete(fn);\n  }\n\n  connect(): void {\n    if (this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {\n      return;\n    }\n\n    try {\n      const url = this.buildUrlWithToken();\n      this.ws = new WebSocket(url);\n      this.connected = false;\n\n      this.ws.onopen = () => {\n        this.connected = true;\n        this.startAckLoop();\n        this.opts.onOpen?.();\n      };\n\n      this.ws.onclose = (ev) => {\n        this.connected = false;\n        this.stopAckLoop();\n        this.opts.onClose?.(ev);\n        if (this.opts.autoReconnect) this.scheduleReconnect();\n      };\n\n      this.ws.onerror = (err) => {\n        this.opts.onError?.(err);\n      };\n\n      this.ws.onmessage = (e) => {\n        try {\n          const m = JSON.parse(e.data) as WebSocketMessage;\n          if (typeof m.event_id === 'string') this.lastEventId = m.event_id;\n          if (typeof (m as any).seq === 'number') this.lastSeq = (m as any).seq as number;\n          this.listeners.forEach((fn) => fn(m));\n        } catch (err) {\n          console.warn('Invalid WS message', err);\n        }\n      };\n    } catch (err) {\n      this.opts.onError?.(err);\n      if (this.opts.autoReconnect) this.scheduleReconnect();\n    }\n  }\n\n  disconnect(): void {\n    this.opts.autoReconnect = false;\n    this.stopAckLoop();\n    if (this.reconnectTimer) clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = null;\n    try {\n      this.ws?.close();\n    } catch {}\n    this.ws = null;\n    this.connected = false;\n  }\n\n  private scheduleReconnect() {\n    if (this.reconnectTimer) return;\n    this.reconnectTimer = setTimeout(() => {\n      this.reconnectTimer = null;\n      this.connect();\n    }, 1000);\n  }\n\n  private startAckLoop() {\n    this.stopAckLoop();\n    const interval = this.opts.ackIntervalMs ?? 200;\n    this.ackTimer = setInterval(() => {\n      if (!this.isOpen()) return;\n      const content = this.lastEventId\n        ? { last_event_id: this.lastEventId }\n        : { last_seq: this.lastSeq };\n      this.send({ event: 'user.ack', content });\n    }, interval);\n  }\n\n  private stopAckLoop() {\n    if (this.ackTimer) clearInterval(this.ackTimer);\n    this.ackTimer = null;\n  }\n\n  private buildUrlWithToken(): string {\n    if (!this.opts.token) return this.opts.url;\n    try {\n      const u = new URL(this.opts.url);\n      u.searchParams.set('token', this.opts.token);\n      return u.toString();\n    } catch {\n      // if invalid URL, best effort append\n      const sep = this.opts.url.includes('?') ? '&' : '?';\n      return `${this.opts.url}${sep}token=${encodeURIComponent(this.opts.token!)}`;\n    }\n  }\n\n  send(payload: any): void {\n    if (!this.ws) return;\n    try {\n      this.ws.send(JSON.stringify({ ...payload, timestamp: new Date().toISOString() }));\n    } catch (err) {\n      this.opts.onError?.(err);\n    }\n  }\n}\n\n","import React from 'react';\nimport { useMyAgent } from '../provider';\nimport { MessageList } from './MessageList';\nimport { UserInput } from './UserInput';\nimport { ConnectionStatus } from './ConnectionStatus';\n\nexport function MyAgentConsole({ className }: { className?: string }) {\n  const { state, createSession, sendUserMessage, sendResponse, requestState, reconnectWithState, cancel } = useMyAgent();\n\n  const onMountCreate = React.useRef(false);\n  React.useEffect(() => {\n    if (state.connection === 'connected' && !state.currentSessionId && !onMountCreate.current) {\n      onMountCreate.current = true;\n      createSession();\n    }\n  }, [state.connection, state.currentSessionId, createSession]);\n\n  return (\n    <div className={`ma-console ${className ?? ''}`.trim()}>\n      <div className=\"ma-header\">\n        <ConnectionStatus status={state.connection} />\n        <div className=\"ma-actions\">\n          <button className=\"ma-btn\" onClick={() => createSession()}>新建会话</button>\n          <button className=\"ma-btn\" onClick={() => requestState()}>导出状态</button>\n          <button\n            className=\"ma-btn\"\n            onClick={() => {\n              try {\n                const raw = typeof localStorage !== 'undefined' ? localStorage.getItem('ma_state_latest') : null;\n                if (!raw) return;\n                const signed = JSON.parse(raw);\n                const last: any = state.lastEventId ? { last_event_id: state.lastEventId } : { last_seq: state.lastSeq };\n                reconnectWithState(signed, last);\n              } catch {}\n            }}\n          >\n            恢复状态\n          </button>\n        </div>\n      </div>\n      <MessageList\n        messages={state.messages}\n        generating={state.generating}\n        onConfirm={(msg, payload) => sendResponse(msg.step_id, payload)}\n        onDecline={(msg, payload) => sendResponse(msg.step_id, payload || { confirmed: false })}\n      />\n      <UserInput\n        onSend={sendUserMessage}\n        disabled={!state.currentSessionId || state.connection !== 'connected'}\n        generating={!!state.generating}\n        onCancel={() => cancel()}\n      />\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from 'react';\nimport type { WebSocketMessage, ConfirmMessage } from '../types';\nimport { MessageItem } from './MessageItem';\n\nexport function MessageList({ messages, generating, onConfirm, onDecline }: { messages: WebSocketMessage[]; generating?: boolean; onConfirm?: (msg: ConfirmMessage, payload: { confirmed: boolean; tasks?: any[] }) => void; onDecline?: (msg: ConfirmMessage, payload?: { confirmed: boolean }) => void }) {\n  const ref = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    const el = ref.current;\n    if (!el) return;\n    el.scrollTop = el.scrollHeight;\n  }, [messages.length, generating]);\n  return (\n    <div ref={ref} className=\"ma-log\">\n      {messages.map((m, i) => (\n        <MessageItem key={m.event_id ?? `${i}-${m.timestamp}`} m={m} onConfirm={onConfirm} onDecline={onDecline} />\n      ))}\n      {generating && (\n        <div className=\"ma-item ma-system\">\n          <div className=\"ma-msg\">\n            <div className=\"ma-muted\">[status]</div>\n            <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n              <span>生成中</span>\n              <span className=\"ma-dots\"><span className=\"d1\">·</span><span className=\"d2\">·</span><span className=\"d3\">·</span></span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport type { LucideIcon } from 'lucide-react';\nimport { User, Bot, Settings, ListTodo, Wrench, Puzzle, GitMerge } from 'lucide-react';\nimport type { WebSocketMessage, ConfirmMessage } from '../types';\n\nfunction stringifyContent(content: any): string {\n  if (content == null) return '';\n  if (typeof content === 'string') return content;\n  try {\n    return JSON.stringify(content, null, 2);\n  } catch {\n    return String(content);\n  }\n}\n\nfunction friendlyFromClientFallback(m: WebSocketMessage): string | undefined {\n  const ev = String(m.event || '');\n  const c: any = (m as any).content;\n  const md: any = (m as any).metadata || {};\n  try {\n    if (ev === 'system.connected') return '已连接到服务器';\n    if (ev === 'system.error') return typeof c === 'string' ? `系统错误：${c}` : '系统错误';\n    if (ev === 'agent.session_created') return '会话创建成功';\n    if (ev === 'agent.thinking') return '正在思考…';\n    if (ev === 'agent.partial_answer') return typeof c === 'string' ? c : '生成中…';\n    if (ev === 'agent.final_answer') return typeof c === 'string' ? c : '已生成答案';\n    if (ev === 'agent.user_confirm') {\n      const scope = md?.scope || 'plan';\n      const tasks = Array.isArray(md?.tasks) ? md.tasks : undefined;\n      const count = tasks ? tasks.length : undefined;\n      const sum = typeof md?.plan_summary === 'string' ? md.plan_summary : undefined;\n      return scope === 'plan'\n        ? `请确认规划${count != null ? `（${count} 个任务）` : ''}${sum ? `：${sum}` : ''}`\n        : '请确认操作';\n    }\n    if (ev === 'plan.start') return typeof c?.question === 'string' ? `开始规划：${c.question}` : '开始规划';\n    if (ev === 'plan.completed') {\n      const tasks = Array.isArray(c?.tasks) ? c.tasks : undefined;\n      const count = tasks ? tasks.length : undefined;\n      const sum = typeof c?.plan_summary === 'string' ? c.plan_summary : undefined;\n      return `规划完成${count != null ? `（${count} 个任务）` : ''}${sum ? `：${sum}` : ''}`;\n    }\n    if (ev === 'solver.start') {\n      const task = c?.task;\n      const title = typeof task?.title === 'string' ? task.title : (typeof task?.name === 'string' ? task.name : undefined);\n      return title ? `开始求解：${title}` : '开始求解';\n    }\n    if (ev === 'solver.completed') {\n      const task = c?.task;\n      const title = typeof task?.title === 'string' ? task.title : (typeof task?.name === 'string' ? task.name : undefined);\n      return title ? `求解完成：${title}` : '求解完成';\n    }\n    if (ev === 'aggregate.start') return '开始聚合';\n    if (ev === 'aggregate.completed') return '聚合完成';\n    if (ev === 'pipeline.completed') return '流水线完成';\n  } catch {}\n  return undefined;\n}\n\nexport function MessageItem({ m, onConfirm, onDecline }: { m: WebSocketMessage; onConfirm?: (msg: ConfirmMessage, payload: { confirmed: boolean; tasks?: any[] }) => void; onDecline?: (msg: ConfirmMessage, payload?: { confirmed: boolean }) => void }) {\n  const event = String(m.event || '');\n  let role: 'agent' | 'user' | 'system' = 'system';\n  if (event.startsWith('agent.') || event.startsWith('plan.') || event.startsWith('solver.') || event.startsWith('aggregate.') || event === 'pipeline.completed') role = 'agent';\n  if (event.startsWith('user.')) role = 'user';\n  const cls = `ma-item ma-${role}`;\n  const label = event.replace(/^.*\\./, '');\n  const preferred = typeof (m as any).show_content === 'string' ? (m as any).show_content : friendlyFromClientFallback(m);\n  const body = stringifyContent(preferred ?? m.content);\n  const ts = m.timestamp ? new Date(m.timestamp).toLocaleTimeString() : '';\n  // Determine confirm early to set default collapsed state\n  const isConfirm = event === 'agent.user_confirm';\n  const [collapsed, setCollapsed] = useState<boolean>(() => !isConfirm);\n  const category = getCategory(event);\n  const Icon = getIcon(category);\n\n  const preview = useMemo(() => {\n    const s = body.replace(/\\s+/g, ' ').trim();\n    return s.length > 140 ? s.slice(0, 140) + '…' : s;\n  }, [body]);\n\n  // Inline confirmation UI inside the message list\n  const confirm = (isConfirm ? (m as ConfirmMessage) : undefined) as ConfirmMessage | undefined;\n  const tasks = useMemo<any[] | null>(() => {\n    const t = confirm?.metadata?.tasks;\n    return Array.isArray(t) ? t : null;\n  }, [confirm]);\n  const [json, setJson] = useState('');\n  const [err, setErr] = useState<string | null>(null);\n  const [sent, setSent] = useState(false);\n  const [selection, setSelection] = useState<null | 'confirmed' | 'declined'>(null);\n  type EditMode = 'form' | 'json';\n  const [editMode, setEditMode] = useState<EditMode>('form');\n  const [formTasks, setFormTasks] = useState<any[]>([]);\n  useEffect(() => {\n    if (isConfirm) {\n      setJson(tasks ? JSON.stringify(tasks, null, 2) : '');\n      setErr(null);\n      setSent(false);\n      setSelection(null);\n      setCollapsed(false); // default expand confirm messages\n      setEditMode('form');\n      try {\n        setFormTasks(Array.isArray(tasks) ? tasks.map((t) => (t && typeof t === 'object' ? { ...t } : t)) : []);\n      } catch {\n        setFormTasks([]);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isConfirm, confirm?.step_id]);\n  const scope = (confirm?.metadata?.scope as string) || 'plan';\n  const title = scope === 'plan' ? '确认规划任务' : '确认操作';\n  const planSummary = confirm?.metadata?.plan_summary as string | undefined;\n  const hasEditable = Boolean(tasks);\n\n  if (isConfirm) {\n    const handleConfirm = () => {\n      if (sent) return;\n      if (hasEditable) {\n        try {\n          let finalTasks: any[] = [];\n          if (editMode === 'json') {\n            const parsed = JSON.parse(json || '[]');\n            if (!Array.isArray(parsed)) throw new Error('JSON 必须为数组');\n            finalTasks = parsed;\n          } else {\n            finalTasks = Array.isArray(formTasks) ? formTasks : [];\n          }\n          onConfirm?.(confirm!, { confirmed: true, tasks: finalTasks });\n          setSelection('confirmed');\n          setSent(true);\n          setCollapsed(true);\n        } catch (e: any) {\n          setErr(String(e?.message || e));\n          return;\n        }\n      } else {\n        onConfirm?.(confirm!, { confirmed: true });\n        setSelection('confirmed');\n        setSent(true);\n        setCollapsed(true);\n      }\n    };\n\n    const handleDecline = () => {\n      if (sent) return;\n      onDecline?.(confirm!, { confirmed: false });\n      setSelection('declined');\n      setSent(true);\n      setCollapsed(true);\n    };\n\n    return (\n      <div className={cls}>\n        <div className=\"ma-msg\">\n          <div className=\"ma-msg-head\">\n            <div className=\"ma-left\">\n              <span className={`ma-icon ${category}`}><Icon size={16} /></span>\n              <div className=\"ma-muted\">[{label}] {ts}</div>\n            </div>\n            <button className=\"ma-linkbtn\" onClick={() => setCollapsed((v) => !v)}>{collapsed ? '展开' : '折叠'}</button>\n          </div>\n          {!collapsed && (\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 8 }}>\n            <strong>{title}</strong>\n            <span className=\"ma-muted\">step: {confirm?.step_id}</span>\n          </div>\n          )}\n          {!collapsed && planSummary && <div className=\"ma-muted\" style={{ marginTop: 4 }}>{planSummary}</div>}\n          {!collapsed && hasEditable ? (\n            <>\n              <div className=\"ma-toolbar\">\n                <div className=\"ma-muted\">共有 {formTasks.length} 个任务</div>\n                <div style={{ display: 'flex', gap: 8 }}>\n                  <button className=\"ma-linkbtn\" onClick={() => { setEditMode('form'); setJson(JSON.stringify(formTasks, null, 2)); }}>表单编辑</button>\n                  <button className=\"ma-linkbtn\" onClick={() => { setEditMode('json'); setJson(JSON.stringify(formTasks, null, 2)); }}>编辑 JSON</button>\n                </div>\n              </div>\n              {editMode === 'json' ? (\n                <>\n                  <div className=\"ma-muted\" style={{ marginTop: 8 }}>编辑 JSON 以修改任务：</div>\n                  <textarea className=\"ma-json\" value={json} onChange={(e) => setJson(e.target.value)} />\n                  {err && <div style={{ color: '#ef4444' }}>{err}</div>}\n                </>\n              ) : (\n                <div className=\"ma-tasklist\">\n                  {formTasks.map((t, idx) => (\n                    <div className=\"ma-task\" key={idx}>\n                      <div className=\"ma-task-head\">#{idx + 1} {(t?.title || t?.name || `任务 ${idx + 1}`)}</div>\n                      <div className=\"ma-form\">\n                        <div className=\"ma-field\">\n                          <label className=\"ma-label\">标题（title）</label>\n                          <input className=\"ma-inputbox\" value={t?.title || ''} onChange={(e) => setFormTasks((arr) => arr.map((x, i) => i === idx ? { ...x, title: e.target.value } : x))} />\n                        </div>\n                        <div className=\"ma-field\">\n                          <label className=\"ma-label\">目标（objective）</label>\n                          <textarea className=\"ma-inputbox\" value={t?.objective || ''} onChange={(e) => setFormTasks((arr) => arr.map((x, i) => i === idx ? { ...x, objective: e.target.value } : x))} />\n                        </div>\n                        <div className=\"ma-field\">\n                          <label className=\"ma-label\">备注（notes）</label>\n                          <input className=\"ma-inputbox\" value={t?.notes || ''} onChange={(e) => setFormTasks((arr) => arr.map((x, i) => i === idx ? { ...x, notes: e.target.value } : x))} />\n                        </div>\n                        <div className=\"ma-field\">\n                          <label className=\"ma-label\">提示（insights）</label>\n                          <div className=\"ma-form\">\n                            {Array.isArray(t?.insights) && t.insights.length > 0 ? t.insights.map((it: any, j: number) => (\n                              <div className=\"ma-inputrow\" key={j}>\n                                <input className=\"ma-inputbox\" value={String(it)} onChange={(e) => setFormTasks((arr) => arr.map((x, i) => i === idx ? { ...x, insights: x.insights.map((s: any, k: number) => k === j ? e.target.value : s) } : x))} />\n                                <button className=\"ma-mini\" onClick={() => setFormTasks((arr) => arr.map((x, i) => i === idx ? { ...x, insights: x.insights.filter((_: any, k: number) => k !== j) } : x))}>删除</button>\n                              </div>\n                            )) : <div className=\"ma-muted\">暂无</div>}\n                            <button className=\"ma-mini\" onClick={() => setFormTasks((arr) => arr.map((x, i) => i === idx ? { ...x, insights: Array.isArray(x.insights) ? [...x.insights, ''] : [''] } : x))}>新增</button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </>\n          ) : !collapsed ? (\n            <div className=\"ma-muted\" style={{ marginTop: 8 }}>是否继续执行？</div>\n          ) : (\n            <div className=\"ma-muted ma-preview\">\n              {selection === 'confirmed' ? '已确认。' : selection === 'declined' ? '已取消。' : `需要确认（${title}）。点击“展开”查看详细。`}\n            </div>\n          )}\n          {!collapsed && (\n          <div className=\"ma-row\" style={{ marginTop: 8 }}>\n            <button className=\"ma-btn\" disabled={sent} onClick={handleDecline}>取消</button>\n            <button className=\"ma-btn\" disabled={sent} onClick={handleConfirm}>确认</button>\n          </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cls}>\n      <div className=\"ma-msg\">\n        <div className=\"ma-msg-head\">\n          <div className=\"ma-left\">\n            <span className={`ma-icon ${category}`}><Icon size={16} /></span>\n            <div className=\"ma-muted\">[{label}] {ts}</div>\n          </div>\n          <button className=\"ma-linkbtn\" onClick={() => setCollapsed((v) => !v)}>{collapsed ? '展开' : '折叠'}</button>\n        </div>\n        {collapsed ? (\n          <div className=\"ma-muted ma-preview\">{preview}</div>\n        ) : (\n          <div>{body}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\ntype Category = 'user' | 'agent' | 'system' | 'plan' | 'solver' | 'aggregate' | 'pipeline';\n\nfunction getCategory(event: string): Category {\n  if (event.startsWith('user.')) return 'user';\n  if (event.startsWith('agent.')) return 'agent';\n  if (event.startsWith('plan.')) return 'plan';\n  if (event.startsWith('solver.')) return 'solver';\n  if (event.startsWith('aggregate.')) return 'aggregate';\n  if (event === 'pipeline.completed' || event.startsWith('pipeline.')) return 'pipeline';\n  if (event.startsWith('system.')) return 'system';\n  return 'system';\n}\n\nfunction getIcon(cat: Category): LucideIcon {\n  switch (cat) {\n    case 'user': return User;\n    case 'agent': return Bot;\n    case 'system': return Settings;\n    case 'plan': return ListTodo;\n    case 'solver': return Wrench;\n    case 'aggregate': return Puzzle;\n    case 'pipeline': return GitMerge;\n    default: return Settings;\n  }\n}\n","import React, { useState } from 'react';\nimport { Loader2 } from 'lucide-react';\n\nexport function UserInput({ onSend, disabled, generating, onCancel }: { onSend: (text: string) => void; disabled?: boolean; generating?: boolean; onCancel?: () => void }) {\n  const [text, setText] = useState('');\n  const send = () => {\n    const v = text.trim();\n    if (!v) return;\n    onSend(v);\n    setText('');\n  };\n  return (\n    <div className=\"ma-input\">\n      <input\n        className=\"ma-text\"\n        placeholder=\"输入你的消息...\"\n        value={text}\n        disabled={disabled || generating}\n        onChange={(e) => setText(e.target.value)}\n        onKeyDown={(e) => {\n          if (!generating && e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            send();\n          }\n        }}\n      />\n      {generating ? (\n        <button className=\"ma-btn ma-send\" onClick={onCancel}>\n          <Loader2 size={16} className=\"ma-spin\" />\n          <span style={{ marginLeft: 6 }}>打断</span>\n        </button>\n      ) : (\n        <button className=\"ma-btn ma-send\" disabled={disabled} onClick={send}>\n          发送\n        </button>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport function ConnectionStatus({ status }: { status: 'connected' | 'connecting' | 'disconnected' | 'error' }) {\n  return (\n    <div className=\"ma-status\" title={`Connection: ${status}`}>\n      <span className={`ma-dot ${status}`} />\n      <span>{status}</span>\n    </div>\n  );\n}\n\n"],"mappings":"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","names":["React","useEffect","useRef","useEffect","useMemo","useState","jsx","jsx","jsxs","useRef","useEffect","useState","jsx","jsxs","jsx","jsxs","jsx","jsxs","React"]}